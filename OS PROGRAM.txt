MEMORY ALLOCATION

1.BEST FIT
----------------
#include<stdio.h>

struct process {
    int size;
    int allocated;
};

void main() {
    int nb, np, best;
    printf("Enter the number of memory locations: ");
    scanf("%d", &nb);
    int block[nb];
    printf("Enter the size of memory locations: ");
    for (int i = 0; i < nb; i++) {
        scanf("%d", &block[i]);
    }
    printf("Enter the number of processes: ");
    scanf("%d", &np);
    struct process pro[np];
    printf("Enter the size of each process: ");
    for (int i = 0; i < np; i++) {
        scanf("%d", &pro[i].size);
        pro[i].allocated = -1;
    }
    for (int i = 0; i < np; i++) {
        best = -1;
        for (int j = 0; j < nb; j++) {
            if (pro[i].size <= block[j]) {
                if (best == -1) {
                    best = j;
                } else if (block[j] < block[best]) {
                    best = j;
                }
            }
        }
        if (best != -1) {
            pro[i].allocated = block[best];
            block[best] = block[best] - pro[i].size;
        }
    }
    printf("\nSI.No\tProcess\tAllocated");
    for (int i = 0; i < np; i++) {
        if (pro[i].allocated != -1) {
            printf("\n%d\t%d\t%d", i + 1, pro[i].size, pro[i].allocated);
        } else {
            printf("\n%d\t%d\tNot allocated", i + 1, pro[i].size);
        }
    }
    printf("\n");
}


2. WORST FIT
--------------


#include<stdio.h>

struct process {
    int size;
    int allocated;
};


void main() {
    int nb, np, best;
    printf("Enter the number of memory locations: ");
    scanf("%d", &nb);
    int block[nb];
    printf("Enter the size of memory locations: ");
    for (int i = 0; i < nb; i++) {
        scanf("%d", &block[i]);
    }
    printf("Enter the number of processes: ");
    scanf("%d", &np);
    struct process pro[np];
    printf("Enter the size of each process: ");
    for (int i = 0; i < np; i++) {
        scanf("%d", &pro[i].size);
        pro[i].allocated = -1;
    }
    for (int i = 0; i < np; i++) {
        best = -1;
        for (int j = 0; j < nb; j++) {
            if (pro[i].size <= block[j]) {
                if (best == -1) {
                    best = j;
                } else if (block[j] > block[best]) {
                    best = j;
                }
            }
        }
        if (best != -1) {
            pro[i].allocated = block[best];
            block[best] = block[best] - pro[i].size;
        }
    }
    printf("\nSI.No\tProcess\tAllocated");
    for (int i = 0; i < np; i++) {
        if (pro[i].allocated != -1) {
            printf("\n%d\t%d\t%d", i + 1, pro[i].size, pro[i].allocated);
        } else {
            printf("\n%d\t%d\tNot allocated", i + 1, pro[i].size);
        }
    }
    printf("\n");
}




3.FIRST FIT
------------

#include<stdio.h>
 
struct process {
  
int size;
    int allocated;
};

void main() {
    int nb, np;
    
    printf("Enter the number of memory locations: ");
    scanf("%d", &nb);
    
    if (nb <= 0) {
        printf("Number of memory locations should be greater than zero.\n");
        return;
    }
    
    int block[nb];
    
    printf("Enter the size of memory locations: ");
    for(int i = 0; i < nb; i++) {
        scanf("%d", &block[i]);
    }
    
    printf("Enter the number of processes: ");
    scanf("%d", &np);
    
    if (np <= 0) {
        printf("Number of processes should be greater than zero.\n");
        return;
    }
    
    struct process pro[np];
    
    printf("Enter the size of each process: ");
    for(int i = 0; i < np; i++) {
        scanf("%d", &pro[i].size);
        pro[i].allocated = -1;
    }
    
    for(int i = 0; i < np; i++) {
        for(int j = 0; j < nb; j++) {
            if (block[j] >= pro[i].size) {
                pro[i].allocated = block[j];
                block[j] -= pro[i].size;
                break;
            }
        }
    }
    
    printf("\nSI.No\tProcess\tAllocated");
    
    for(int i = 0; i < np; i++) {
        if(pro[i].allocated != -1) {
            printf("\n%d\t%d\t%d", i + 1, pro[i].size, pro[i].allocated);
        } else {
            printf("\n%d\t%d\tnot allocated", i + 1, pro[i].size);
        }
    }
    
    printf("\n");
}

PROCESS SCHEDULING

4.FCFS
---------
#include <stdio.h>
struct process{
    int processnumber;
    int bursttime;
    int arrivaltime;
    int waitingtime;
    int turnaroundtime;
};

void main(){
    int n,i,j;
    int currenttime = 0;
    float total_waitingtime = 0,total_turnaroundtime = 0;
    printf("\nEnter the number of the processes : ");
    scanf("%d",&n);
    struct process p[n];
    printf("\nEnter the arrival time and the burst time of each processes\n");
    for(i=0;i<n;i++){
        p[i].processnumber = i + 1;
        printf("Enter the arrival time and burst time of P%d : ",i + 1);
        scanf("%d%d",&p[i].arrivaltime,&p[i].bursttime);
    }
    struct process temp;
    for(i=0;i<n;i++){
        for(j=0;j<n-1-i;j++){
            if(p[j].arrivaltime > p[j + 1].arrivaltime){
                temp = p[j];
                p[j] = p[j+1];
                p[j + 1] = temp;
            }
        }
    }
    printf("\nGiven Processes\n");
    printf("Process number\t\tArrival time\t\tBursttime");
    for(i=0;i<n;i++){
        printf("\nP%d\t\t\t\t%d\t\t\t\t%d",p[i].processnumber,p[i].arrivaltime,p[i].bursttime);
    }
    for(i=0;i<n;i++){
        if(currenttime <= p[i].arrivaltime){
                currenttime = p[i].arrivaltime;
        }
            p[i].waitingtime = currenttime - p[i].arrivaltime;
            total_waitingtime += p[i].waitingtime;
            currenttime = currenttime + p[i].bursttime;
            p[i].turnaroundtime = currenttime - p[i].arrivaltime;
            total_turnaroundtime += p[i].turnaroundtime;
    }
    printf("\n****OUTPUT***\n");
    printf("process number\t\tWaiting time\t\tTurn around time");
    for(i=0;i<n;i++){
        printf("\nP%d\t\t\t\t%d\t\t\t\t%d",p[i].processnumber,p[i].waitingtime,p[i].turnaroundtime);
    }
    printf("\nAverage Waiting time : %f",(double)total_waitingtime/n);
    printf("\nAverage Turn around time : %f",(double)total_turnaroundtime/n);

}


5 SJF
------------

#include<stdio.h>
int main()
{
    int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,totalT=0,pos,temp;
    float avg_wt,avg_tat;
    printf("Enter number of process:");
    scanf("%d",&n);

    printf("\nEnter Burst Time:\n");
    for(i=0;i<n;i++)
    {
        printf("p%d:",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;
    }

    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }

        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;

        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }

    wt[0]=0;

    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];

        total+=wt[i];
    }

    avg_wt=(float)total/n;

    printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];
        totalT+=tat[i];
        printf("\np%d\t\t %d\t\t %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }

    avg_tat=(float)totalT/n;
    printf("\n\nAverage Waiting Time=%f",avg_wt);
    printf("\nAverage Turnaround Time=%f",avg_tat);
}



6.PRIORITY SCHELDUDE
----------------------


#include <stdio.h>

int main() {
    int bt[20], p[20], wt[20], tat[20], pr[20], i, j, n, total = 0, pos, temp, avg_wt, avg_tat;

    printf("Enter Total Number of Process:");
    scanf("%d", &n);
    printf("\nEnter Burst Time and Priority\n");

    for (i = 0; i < n; i++) {
        printf("\nP[%d]\n", i + 1);
        printf("Burst Time:");
        scanf("%d", &bt[i]);
        printf("Priority:");
        scanf("%d", &pr[i]);
        p[i] = i + 1;
    }

    for (i = 0; i < n; i++) {
        pos = i;
        for (j = i + 1; j < n; j++) {
            if (pr[j] < pr[pos])
                pos = j;
        }
        temp = pr[i];
        pr[i] = pr[pos];
        pr[pos] = temp;
        temp = bt[i];
        bt[i] = bt[pos];
        bt[pos] = temp;
        temp = p[i];
        p[i] = p[pos];
        p[pos] = temp;
    }

    wt[0] = 0;
    for (i = 1; i < n; i++) {
        wt[i] = 0;
        for (j = 0; j < i; j++)
            wt[i] += bt[j];
        total += wt[i];
    }
    avg_wt = total / n;
    total = 0;
    
    printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
    for (i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
        total += tat[i];
        printf("\nP[%d]\t\t %d\t\t %d\t\t\t%d", p[i], bt[i], wt[i], tat[i]);
    }
    avg_tat = total / n;
    printf("\n\nAverage Waiting Time=%d", avg_wt);
    printf("\nAverage Turnaround Time=%d\n", avg_tat);
    
    return 0;
}



7.ROUND ROBIN
--------------




#include<stdio.h> 

int main() 
{ 
    int i, n, total = 0, temp, count= 0, qt; 
    int wt[10], bt[10], tat[10], rem_bt[10]; 
    float awt=0, atat=0; 

    printf("\nEnter Total Number of Processes:\n"); 
    scanf("%d", &n); 
    printf("\nEnter burst time of Processes:\n");

    for(i = 0; i < n; i++) 
    {
        scanf("%d", &bt[i]); 
        rem_bt[i]=bt[i];
    } 

    printf("\nEnter Time Quantum:\t"); 
    scanf("%d", &qt); 

    while(1) 
    {
        for(i=0,count=0;i<n;i++)
        { 
            temp=qt;
            if(rem_bt[i]==0)
            {
                count++;
                continue;
            }
            if(rem_bt[i]>qt)
                rem_bt[i]= rem_bt[i]-qt;
            else if(rem_bt[i]>=0)
            {
                temp=rem_bt[i];
                rem_bt[i]=0;
            }
            total=total+temp;
            tat[i]=total;
        }
        if(n==count)
            break;
    }

    printf("\nPID\tBurstTime\tTurn_time\tWait_Time\n");
    for(i=0;i<n;i++)
    {
        wt[i]=tat[i]-bt[i];
        awt=awt+wt[i];
        atat=atat+tat[i];
        printf("\n%d\t%d\t\t%d\t\t%d",i+1,bt[i],tat[i],wt[i]); 
    }

    awt = awt/n;
    atat=atat/n;
    printf("\n\nAverage Waiting Time:\t%f", awt); 
    printf("\nAvg Turnaround Time:\t%f\n", atat); 

    return 0;
}


DISK SCHEDULING 

8.FCFS DISK SCHELDULING
--------------------------


#include<stdio.h>
#include<stdlib.h>

int main() {
    int RQ[100], i, n, TotalHeadMoment = 0, initial;

    printf("Enter the number of Requests\n");
    scanf("%d", &n);

    printf("Enter the Requests sequence\n");
    for(i = 0; i < n; i++)
        scanf("%d", &RQ[i]);

    printf("Enter initial head position\n");
    scanf("%d", &initial);

    for(i = 0; i < n; i++) {
        TotalHeadMoment += abs(RQ[i] - initial);
        initial = RQ[i];
    }

    printf("Total head moment is %d", TotalHeadMoment);

    return 0;
}

9.SCAN
-----------




#include<stdio.h>
#include<stdlib.h>

int main() {
    int RQ[100], i, j, n, TotalHeadMoment = 0, initial, size, move;

    printf("Enter the number of Requests\n");
    scanf("%d", &n);
    
    printf("Enter the Requests sequence\n");
    for(i = 0; i < n; i++)
        scanf("%d", &RQ[i]);

    printf("Enter initial head position\n");
    scanf("%d", &initial);

    printf("Enter total disk size\n");
    scanf("%d", &size);

    printf("Enter the head movement direction for high 1 and for low 0\n");
    scanf("%d", &move);

    for(i = 0; i < n; i++) {
        for(j = 0; j < n - i - 1; j++) {
            if(RQ[j] > RQ[j + 1]) {
                int temp;
                temp = RQ[j];
                RQ[j] = RQ[j + 1];
                RQ[j + 1] = temp;
            }
        }
    }

    int index;
    for(i = 0; i < n; i++) {
        if(initial < RQ[i]) {
            index = i;
            break;
        }
    }

    if(move == 1) {
        for(i = index; i < n; i++) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(size - RQ[i - 1] - 1);
        initial = size - 1;
        for(i = index - 1; i >= 0; i--) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    } 
    else {
        for(i = index - 1; i >= 0; i--) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(RQ[i + 1] - 0);
        initial = 0;
        for(i = index; i < n; i++) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    }

    printf("Total head movement is %d", TotalHeadMoment);

    return 0;
}


10.C-SCAN
-----------

#include<stdio.h>
#include<stdlib.h>

int main() {
    int RQ[100], i, j, n, TotalHeadMoment = 0, initial, size, move;

    printf("Enter the number of Requests\n");
    scanf("%d", &n);

    printf("Enter the Requests sequence\n");
    for(i = 0; i < n; i++)
        scanf("%d", &RQ[i]);

    printf("Enter initial head position\n");
    scanf("%d", &initial);

    printf("Enter total disk size\n");
    scanf("%d", &size);

    printf("Enter the head movement direction for high 1 and for low 0\n");
    scanf("%d", &move);

    for(i = 0; i < n; i++) {
        for(j = 0; j < n - i - 1; j++) {
            if(RQ[j] > RQ[j + 1]) {
                int temp;
                temp = RQ[j];
                RQ[j] = RQ[j + 1];
                RQ[j + 1] = temp;
            }
        }
    }

    int index;
    for(i = 0; i < n; i++) {
        if(initial < RQ[i]) {
            index = i;
            break;
        }
    }

    if(move == 1) {
        for(i = index; i < n; i++) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(size - RQ[i - 1] - 1);
        TotalHeadMoment += abs(size - 1 - 0);
        initial = 0;
        for(i = 0; i < index; i++) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    } 
    else {
        for(i = index - 1; i >= 0; i--) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(RQ[i + 1] - 0);
        TotalHeadMoment += abs(size - 1 - 0);
        initial = size - 1;
        for(i = n - 1; i >= index; i--) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    }

    printf("Total head movement is %d", TotalHeadMoment);

    return 0;
}










